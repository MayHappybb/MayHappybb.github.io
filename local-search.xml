<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>红米AC2100刷入OpenWRT设置vwan实现校园网多次登录叠加带宽</title>
    <link href="/2021/10/10/%E7%BA%A2%E7%B1%B3AC2100%E5%88%B7%E5%85%A5OpenWRT%E8%AE%BE%E7%BD%AEvwan%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%A4%9A%E6%AC%A1%E7%99%BB%E5%BD%95%E5%8F%A0%E5%8A%A0%E5%B8%A6%E5%AE%BD/"/>
    <url>/2021/10/10/%E7%BA%A2%E7%B1%B3AC2100%E5%88%B7%E5%85%A5OpenWRT%E8%AE%BE%E7%BD%AEvwan%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%A4%9A%E6%AC%A1%E7%99%BB%E5%BD%95%E5%8F%A0%E5%8A%A0%E5%B8%A6%E5%AE%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="红米ac2100刷入openwrt设置vwan实现校园网多次登录叠加带宽"><a class="markdownIt-Anchor" href="#红米ac2100刷入openwrt设置vwan实现校园网多次登录叠加带宽"></a> 红米AC2100刷入OpenWRT设置vwan实现校园网多次登录叠加带宽</h2><hr /><h3 id="1刷入breed使用恩山大佬的方法"><a class="markdownIt-Anchor" href="#1刷入breed使用恩山大佬的方法"></a> 1.刷入breed（<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=4066963">使用恩山大佬的方法</a>）</h3><h4 id="11刷入降级固件"><a class="markdownIt-Anchor" href="#11刷入降级固件"></a> 1.1.刷入降级固件</h4><p>点击下载固件：<a href="http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rm2100/miwifi_rm2100_firmware_d6234_2.0.7.bin">红米AC2100</a>、<a href="http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/r2100/miwifi_r2100_firmware_4b519_2.0.722.bin">小米AC2100</a></p><p>下载完成后进入后台192.168.31.1**–&gt;<strong>常用设置</strong>–&gt;<strong>系统状态</strong>–&gt;<strong>手动升级</strong>–&gt;<strong>加载固件，可以保留数据</strong>–&gt;**开始升级</p><h4 id="12刷入breed"><a class="markdownIt-Anchor" href="#12刷入breed"></a> 1.2.刷入breed</h4><p>（首先确保路由器连接到互联网，这样才能下载breed）</p><p>进入后台192.168.31.1，复制自己的stok：</p><p><img src="https://www.right.com.cn/forum/forum.php?mod=attachment&amp;aid=NDQwMzI2fDU0OWNhOGVjfDE2MzE5Mjc5NTV8NzE0MzUwfDQwNjY5NjM%3D&amp;noupdate=yes" alt="" /></p><p>将以下代码中的<code>stok=CCCCCCCCCCC</code>更改为<code>stok=刚才复制的stok</code>后粘贴到浏览器，<em><strong>用于检测NAND坏块</strong></em>，运行代码后，浏览器会显示 : {“code”:0} ). 如果显示其他代码，可能是你还没降级固件或者stok过期。也可以恢复出厂从试。此后，你路由器的2.4g WiFi名称会改名成：比如  “ESMT”，“Toshiba”，“Toshiba 90 768”。 90和768是坏块。 如果ESMT或者Toshiba后面没数字，那恭喜你，没有坏块！！！</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.31.1&#x2F;cgi-bin&#x2F;luci&#x2F;;stok&#x3D;CCCCCCCCCCC&#x2F;api&#x2F;misystem&#x2F;set_config_iotdev?bssid&#x3D;Xiaomi&amp;user_id&#x3D;longdike&amp;ssid&#x3D;%0A%5B%20-z%20%22%24(dmesg%20%7C%20grep%20ESMT)%22%20%5D%20%26%26%20B%3D%22Toshiba%22%20%7C%7C%20B%3D%22ESMT%22%0Auci%20set%20wireless.%24(uci%20show%20wireless%20%7C%20awk%20-F%20&#39;.&#39;%20&#39;%2Fwl1%2F%20%7Bprint%20%242%7D&#39;).ssid%3D%22%24B%20%24(dmesg%20%7C%20awk%20&#39;%2FBad%2F%20%7Bprint%20%245%7D&#39;)%22%0A%2Fetc%2Finit.d%2Fnetwork%20restart%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>而以下代码***用于刷入breed***。你可以先检查坏块，不检查也没关系。Bootloader那里肯定不会有坏块，不然官方Uboot也会出问题的。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.31.1&#x2F;cgi-bin&#x2F;luci&#x2F;;stok&#x3D;CCCCCCCCCCC&#x2F;api&#x2F;misystem&#x2F;set_config_iotdev?bssid&#x3D;Xiaomi&amp;user_id&#x3D;longdike&amp;ssid&#x3D;%0Acd%20%2Ftmp%0Acurl%20-o%20B%20-O%20https%3A%2F%2Fbreed.hackpascal.net%2Fbreed-mt7621-xiaomi-r3g.bin%20-k%0A%5B%20-z%20%22%24(sha256sum%20B%20%7C%20grep%20242d42eb5f5aaa67ddc9c1baf1acdf58d289e3f792adfdd77b589b9dc71eff85)%22%20%5D%20%7C%7C%20mtd%20-r%20write%20B%20Bootloader%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>如果路由器在60秒内重启则代表刷BREED成功(灯会从蓝变橘，最终变蓝进入系统)。成功后拔掉电源，按住reset同时接上电源等10秒即可进入breed，（管理面页为192.168.1.1）如果没重启，可能是stok过期了。进入后台复制新的stok即可。也有可能下载的BREED损坏，从新运行代码。也有可能没网络。刷完后可能无法进入原厂系统，进BREED删变量：normal_firmware_md5</p><h4 id="13进入breed"><a class="markdownIt-Anchor" href="#13进入breed"></a> 1.3.进入breed</h4><p>将路由器LAN口连接到电脑，设置dhcp自动获取ip，接着用牙签按住reset后插入电源，直到蓝色灯闪烁松开，浏览器打开192.168.1.1进入breed</p><h4 id="14-breed功能介绍"><a class="markdownIt-Anchor" href="#14-breed功能介绍"></a> 1.4 breed功能介绍</h4><p>1.固件备份，可以备份eeprom和编程器固件等，eeprom.bin文件包含路由器MAC地址、无线校准参数等。丢失该文件，无线路由器可能WAN因为没有MAC无法从上级路由器获取IP；无线路由器没有无线信号或信号极弱。编程器固件就是闪存全部备份，相当于电脑硬盘的全盘镜像。</p><p>2.固件更新，在***常规固件***中，可以刷入新固件，第一个Bootloader就是breed，刷入这个会覆盖现有的breed一般用来升级breed使用，当然也可以更换成其他的Bootloader。第二个就是固件，常用breed来刷第三方固件就是从这里刷入，只需要点击后面的浏览，找到电脑中第三方路由器固件，然后上传后更新即可刷入。第三个EEPROM就是前面备份的无线路由器校准文件，一般无需刷入，除非路由器成砖后刷入breed，然后从这里刷入eeprom恢复无线信号和mac地址等；在***编程器固件***中更新，相当于电脑全盘备份后恢复操作。不过这里可以选择剔除引导程序和无线校准文件，保留breed和原来的mac地址等。</p><h3 id="2刷入openwrt记得先备份原来的编程器固件"><a class="markdownIt-Anchor" href="#2刷入openwrt记得先备份原来的编程器固件"></a> 2.刷入OpenWRT（记得先备份原来的编程器固件）</h3><p>此处参照<a href="http://openwrt.ink:88/archives/s-breed">恩山大佬教程</a>。首先进入breed，先在常规固件更新中刷入<a href="http://openwrt.ink:8666/Breed/%E8%BF%87%E6%B8%A1%E5%8C%85/AC2100-Breed-MiddleRom.bin">中间固件包</a>，刷完后重启浏览器打开192.168.1.1进入openwrt管理页面，在system-Backup＆Update 刷写OpenWrt，固件链接如下http://openwrt.ink:8666/firmware/All_RM2100/</p><h3 id="3暂时失败了未完待续"><a class="markdownIt-Anchor" href="#3暂时失败了未完待续"></a> 3.暂时失败了😭😭未完待续…</h3><h3 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h3><p>1、<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=4019555">恩山大佬帖子</a></p><p>2、<a href="http://openwrt.ink:88/">恩山大佬博客</a>（固件等内容在页面网盘处）</p><p>3、<a href="https://openwrt.org/toh/xiaomi/xiaomi_redmi_router_ac2100#install_luci">OpenWRT官方红米ac2100支持</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Router</tag>
      
      <tag>Openwrt</tag>
      
      <tag>AC2100</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用ESP8266初试Homie</title>
    <link href="/2021/10/10/%E5%88%A9%E7%94%A8ESP8266%E5%88%9D%E8%AF%95Homie/"/>
    <url>/2021/10/10/%E5%88%A9%E7%94%A8ESP8266%E5%88%9D%E8%AF%95Homie/</url>
    
    <content type="html"><![CDATA[<h2 id="利用esp8266初试homie"><a class="markdownIt-Anchor" href="#利用esp8266初试homie"></a> 利用ESP8266初试<a href="https://github.com/homieiot/convention">Homie</a></h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>​什么是Homie？引用<a href="https://homieiot.github.io/#">官方的说法</a>：</p><blockquote><p>Homie 约定定义了 IoT 设备和服务如何在 MQTT 代理上宣布自身及其数据的标准化方式。因此，它是 MQTT 协议之上的一个关键方面，用于自动发现、配置和使用设备和服务。</p></blockquote><p>而<a href="https://github.com/homieiot/homie-esp8266">Homie for ESP8266 / ESP32</a>则是利用ESP8266或ESP32实现Homie。</p><h3 id="1将homie刷入esp8266"><a class="markdownIt-Anchor" href="#1将homie刷入esp8266"></a> 1.将Homie刷入ESP8266</h3><p>​Homie的安装支持Arduino IDE和PlatformIO，这里使用前者。</p><h4 id="11下载zip库"><a class="markdownIt-Anchor" href="#11下载zip库"></a> 1.1下载.zip库</h4><p>​从<a href="https://github.com/homieiot/homie-esp8266/releases">官方发行</a>处下载所需版本，这里选择3.0版本</p><h4 id="12安装homie库"><a class="markdownIt-Anchor" href="#12安装homie库"></a> 1.2安装Homie库</h4><p>​打开Arduino IDE，选中<strong>项目</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>加载库</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>添加.zip库</strong>，在弹出的窗口中选择上一步下载的.zip库，即可完成Homie库的安装。</p><h4 id="13安装相关依赖"><a class="markdownIt-Anchor" href="#13安装相关依赖"></a> 1.3安装相关依赖</h4><p>​根据官方文档，Homie所依赖的库有以下5个：</p><ul><li><a href="https://github.com/bblanchon/ArduinoJson">ArduinoJson</a> &gt;= 5.0.8</li><li><a href="https://github.com/thomasfredericks/Bounce2">Bounce2</a></li><li><a href="https://github.com/me-no-dev/ESPAsyncTCP">ESPAsyncTCP</a> &gt;= c8ed544</li><li><a href="https://github.com/marvinroger/async-mqtt-client">AsyncMqttClient</a></li><li><a href="https://github.com/me-no-dev/ESPAsyncWebServer">ESPAsyncWebServer</a></li></ul><p>​其中ArduinoJson、Bounce2可在Arduino IDE中直接安装：选中<strong>工具</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>管理库</strong>，在弹出的库管理器中搜索安装即可（注意需要挂代理），也可使用下述方法安装。</p><p>​其余几个库需要直接下载安装：点击上述库，跳转至对应GIthub仓库，点击<strong>Code</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>Download ZIP</strong>，下载.zip后如1.2节方法安装即可。</p><h4 id="14烧录最小代码"><a class="markdownIt-Anchor" href="#14烧录最小代码"></a> 1.4烧录最小代码</h4><p>​安装完所有库后重启Arduino IDE，新建项目，将以下代码粘入：</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;This is the bare minimum needed for Homie for ESP8266 to work correctly.#include &lt;Homie.h&gt;void setup() &#123;  Serial.begin(115200);  Serial &lt;&lt; endl &lt;&lt; endl;  Homie_setFirmware(&quot;bare-minimum&quot;, &quot;1.0.0&quot;); &#x2F;&#x2F; The underscore is not a typo! See Magic bytes  Homie.setup();&#125;void loop() &#123;  Homie.loop();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>​在<strong>工具</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>开发板</strong>中选择对应的开发板型号及端口号，然后点击<strong>上传</strong>即可，上传完成后ESP8266进入<code>configuration</code>模式。</p><blockquote><p><code>configuration</code>模式：默认情况下，配置模式为初始模式。 它生成一个 AP 和一个公开 JSON API 的 HTTP 网络服务器。要与之交互，您必须连接到 AP，然后，HTTP 客户端可以获取可用 Wi-Fi 网络的列表并发送配置（如 Wi-Fi SSID、Wi-Fi 密码、一些设置…）。一旦设备收到凭据，它就会启动到正常模式。<br /><code>normal</code>模式：正常模式是设备大部分时间的模式。 它连接到 Wi-Fi，连接到 MQTT，它向 Homie 服务器发送初始信息（如本地 IP、当前运行的固件版本…）并订阅所需的 MQTT 主题。 当连接丢失时，它会自动重新连接到 Wi-Fi 和 MQTT。 它还处理OTA。 设备可以通过不同方式返回配置模式（按下按钮或自定义功能，请参阅重置）。<br /><code>standalone</code>模式：Homie for ESP8266 has a special mode named standalone. It was a requested feature to implement a way not to boot into configuration mode on initial boot, so that a device can work without being configured first. It was already possible in configuration mode, but the device would spawn an AP which would make it insecure.</p></blockquote><h3 id="2初始化homie"><a class="markdownIt-Anchor" href="#2初始化homie"></a> 2.初始化Homie</h3><p>根据官方解释，这里有3种方法进行<code>configuration</code>模式中的初始化设置，这里将分别介绍。</p><h4 id="21三种配置方法"><a class="markdownIt-Anchor" href="#21三种配置方法"></a> 2.1三种配置方法</h4><h4 id="21a利用外部网站进行初始化配置"><a class="markdownIt-Anchor" href="#21a利用外部网站进行初始化配置"></a> 2.1a利用外部网站进行初始化配置</h4><p>​这种方法是利用外部网站更改http json来进行配置，具体两种方法如下：</p><h5 id="21a1本地部署网站"><a class="markdownIt-Anchor" href="#21a1本地部署网站"></a> 2.1a.1本地部署网站</h5><ul><li>在<a href="https://github.com/homieiot/homie-esp8266-setup/tree/gh-pages">github仓库</a>中将整个仓库的<a href="https://github.com/homieiot/homie-esp8266-setup/archive/refs/heads/gh-pages.zip">.zip文件</a>下载</li><li>解压后双击目录内的<code>index.html</code>可以在浏览器中打开此本地网页</li><li>连接wifi到<code>Homie-xxxxxxxxxxxx</code></li><li>按指引进行配置</li></ul><h5 id="21a2缓存在线网站"><a class="markdownIt-Anchor" href="#21a2缓存在线网站"></a> 2.1a.2缓存在线网站</h5><p>​若不想使用本地网站，也可直接使用在线网站（事实上该网页会自动缓存）。</p><ul><li>接入互联网</li><li>打开<a href="http://setup.homie-esp8266.marvinroger.fr/">网页</a></li><li>将wifi连接到<code>Homie-xxxxxxxxxxxx</code></li><li>按指引进行配置</li></ul><h4 id="21b将网页直接烧录至esp8266"><a class="markdownIt-Anchor" href="#21b将网页直接烧录至esp8266"></a> 2.1b将网页直接烧录至ESP8266</h4><p>​这种方法将网页直接写入ESP8266中（<a href="https://github.com/homieiot/homie-esp8266/tree/develop/data/homie">github仓库</a>），具体操作如下：</p><h5 id="21b1安装esp8266fs工具"><a class="markdownIt-Anchor" href="#21b1安装esp8266fs工具"></a> 2.1b.1安装ESP8266FS工具</h5><blockquote><p><em>ESP8266FS</em> is a tool which integrates into the Arduino IDE. It adds a menu item to <em>Tools</em> menu for uploading the contents of sketch data directory into ESP8266 flash file system.</p></blockquote><ul><li>首先下载此<a href="https://github.com/esp8266/arduino-esp8266fs-plugin/releases">工具</a>，注意选择<strong>最新</strong>版本下载。</li><li>随后打开Arduino项目文件夹：在Arduino IDE中点击<strong>文件</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>首选项</strong>，即可看到项目文件夹位置。</li><li>打开项目文件夹中的<code>tools</code>目录（若没有则新建一个），将工具解压在此，此时文件路径应该看起来像这样：<code>/项目文件夹/tools/ESP8266FS/tool/esp8266fs.jar</code></li><li>重启Arduino IDE</li><li>完成安装</li></ul><h5 id="21b2上传网页文件"><a class="markdownIt-Anchor" href="#21b2上传网页文件"></a> 2.1b.2上传网页文件</h5><p>​将网页文件上传至ESP8266：</p><ul><li>下载网页文件（<a href="http://setup.homie-esp8266.marvinroger.fr/ui_bundle.gz">ui_bundle.gz</a>）</li><li>在Arduino IDE中点击<strong>文件</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>新建</strong>以创建一个新文件，然后<strong>文件</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>保存</strong>，这样就新建了一个<code>项目(sketch)</code></li><li>打开上述项目文件夹，其中应包含一个与文件夹同名的<code>.ino</code>文件，在此新建<code>data</code>文件夹</li><li>在<code>data</code>文件夹内再新建<code>homie</code>文件夹并进入</li><li>将ui_bundle.gz放在<code>homie</code>文件夹内</li><li>在Arduino IDE中选好开发板型号和端口号后，点击<strong>工具</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>ESP8266 Sketch Data Upload</strong>即可完成上传</li></ul><p>​若报错<code>SPIFFS Error: esptool not found!</code>请检查是否在<strong>工具</strong>中存在多个<strong>ESP8266 Sketch Data Upload</strong>，若存在多个（表明可能之前装过且版本过低），请选择最下方的那一个。</p><h5 id="21b3配置"><a class="markdownIt-Anchor" href="#21b3配置"></a> 2.1b.3配置</h5><ul><li>wifi连接到<code>Homie-xxxxxxxxxxxx</code></li><li>浏览器打开<a href="http://192.168.123.1">http://192.168.123.1</a></li><li>按指引配置</li></ul><h4 id="21c利用android-app进行配置"><a class="markdownIt-Anchor" href="#21c利用android-app进行配置"></a> 2.1c利用Android app进行配置</h4><p>​利用PhoneGap软件…（待填坑，着急可看<a href="https://homieiot.github.io/homie-esp8266/docs/3.0.0/configuration/http-json-api/">这里</a>）</p><h4 id="22配置指引"><a class="markdownIt-Anchor" href="#22配置指引"></a> 2.2配置指引</h4><p>​…(待填坑)</p><h3 id="3设置mqtt服务器"><a class="markdownIt-Anchor" href="#3设置mqtt服务器"></a> 3.设置MQTT服务器</h3><h4 id="31基于docker利用emqttd搭建mqtt服务器"><a class="markdownIt-Anchor" href="#31基于docker利用emqttd搭建mqtt服务器"></a> 3.1基于docker利用emqttd搭建MQTT服务器</h4><h5 id="311安装docker"><a class="markdownIt-Anchor" href="#311安装docker"></a> 3.1.1安装docker</h5><p>​在此使用armbian发行版，使用脚本快捷安装docker（参考<a href="https://docs.docker.com/engine/install/debian/">官方文档</a>），输入以下命令即可：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc<span class="token comment">#卸载旧版本</span>$ <span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh$ <span class="token assign-left variable">DRY_RUN</span><span class="token operator">=</span><span class="token number">1</span> <span class="token function">sh</span> ./get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h5 id="312测试docker"><a class="markdownIt-Anchor" href="#312测试docker"></a> 3.1.2测试docker</h5><p>​运行hello-world镜像测试：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>​若docker安装成功，你会看到一条消息：“Hello from Docker!”</p><h5 id="313安装图形界面portainer"><a class="markdownIt-Anchor" href="#313安装图形界面portainer"></a> 3.1.3安装图形界面portainer</h5><p>​安装portainer便于管理docker：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker pull portainer/portainer$ <span class="token function">sudo</span> docker volume create portainer_data$ <span class="token function">sudo</span> docker run -d -p <span class="token number">9000</span>:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>​若第一步pull失败，可尝试使用国内镜像源（参考<a href="https://www.cnblogs.com/cao-lei/p/14448052.html">这里</a>）：</p><ul><li>中国官方镜像站：<a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a></li><li>网易163镜像：<a href="http://hub-mirror.c.163.com">http://hub-mirror.c.163.com</a></li><li>中科大镜像：<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a></li><li>阿里云镜像：https://[xxx].mirror.aliyuncs.com</li><li>DaoCloud镜像：http://[xxx].m.daocloud.io</li></ul><p>​具体配置如下：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://xx4bwyg2.mirror.aliyuncs.com"</span><span class="token punctuation">,</span>    <span class="token string">"http://f1361db2.m.daocloud.io"</span><span class="token punctuation">,</span>    <span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span>    <span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使配置生效</span>$ systemctl daemon-reload<span class="token comment"># 重启Docker</span>$ systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>​更换源后再尝试pull。</p><h5 id="314配置portainer"><a class="markdownIt-Anchor" href="#314配置portainer"></a> 3.1.4配置portainer</h5><p>​成功运行portainer容器后在<code>9000</code>端口打开网页进入界面，首次访问需要设定账号密码。注意选择<code>Local</code>环境。在portainer中需要重新切换国内镜像源：</p><ul><li>进入portainer管理页面后，点击<strong>Registries</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>Add registry</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>Custom registry</strong></li><li>在<strong>Name</strong>中填写备注名称，在<strong>Registry URL</strong>中填写源地址</li><li>点击<strong>Add registry</strong>即可</li></ul><p>拉取镜像时，点击左侧面板的<strong>Images</strong>，在<strong>Registry</strong>下拉选择镜像站（名称为刚才填写的备注名），在<strong>Image</strong>中填写所需镜像后点击<strong>Pull the image</strong>即可拉取镜像。</p><h5 id="315安装emqx"><a class="markdownIt-Anchor" href="#315安装emqx"></a> 3.1.5安装emqx</h5><p>​什么是EMQ X？</p><blockquote><p>An Open-Source, Cloud-Native, Massive-Scalable MQTT Broker for IoT</p></blockquote><p>具体操作如下：</p><ul><li><p>在portainer中拉取镜像：<code>emqx/emqx</code></p></li><li><p>在portainer中左侧<strong>Containers</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rarr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span><strong>Add container</strong>，在<strong>Registry</strong>中选择拉取镜像时所用镜像站，<strong>Image</strong>选择<code>emqx/emqx</code></p></li><li><p>在下方<strong>Manual network port publishing</strong>手动添加端口映射：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">host:1883container:1883TCPhost:1883container:1883UDPhost:18083container:18083TCPhost:18083container:18083UDP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>点击<strong>Deploy the container</strong></p></li><li><p>部署完成后在18083端口可看到管理页面，默认用户名为<code>admin</code>，密码为<code>public</code></p></li></ul><h4 id="32配置homie设备的mqtt服务器"><a class="markdownIt-Anchor" href="#32配置homie设备的mqtt服务器"></a> 3.2配置homie设备的MQTT服务器</h4><p>​在<code>configuration</code>模式中进入配置页面，选择wifi，填入密码后进入MQTT配置栏，按如下填写：</p><ul><li><strong>MQTT broker address</strong>：填写部署了emqx的设备的ip地址</li><li><strong>MQTT broker port</strong>：1883</li><li><strong>Homie base topic</strong>：默认即可</li></ul><h3 id="4homie添加节点进行使用"><a class="markdownIt-Anchor" href="#4homie添加节点进行使用"></a> 4.Homie添加节点进行使用</h3><p>​有点辣鸡这玩意，不好用，无法设置低功耗待机模式，只有睡眠模式，此模式下还无法连接到wifi进行订阅主题，辣鸡，怕是要自己写才行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>ESP8266</tag>
      
      <tag>智能家居</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu调整时区</title>
    <link href="/2021/09/15/Ubuntu%E8%B0%83%E6%95%B4%E6%97%B6%E5%8C%BA/"/>
    <url>/2021/09/15/Ubuntu%E8%B0%83%E6%95%B4%E6%97%B6%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<p>查看当前时间：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">root@ubuntu:&#x2F;# date -RWed, 15 Sep 2021 16:08:56 +0300     #所在时区应为东八区，而此处为东三区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>引用<a href="https://blog.csdn.net/zhengchaooo/article/details/79500032">csdn评论</a>下的方法：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">root@ubuntu:&#x2F;# timedatectl set-timezone Asia&#x2F;Shanghairoot@ubuntu:&#x2F;# date -R      #再次查看当前时间Wed, 15 Sep 2021 21:16:34 +0800     #成功更改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>此外，可以设置系统时间：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">root@ubuntu:&#x2F;# date --set&#x3D;&#39;2021-09-15 21:41:59 +0800&#39;Wed Sep 15 21:41:59 CST 2021root@ubuntu:&#x2F;# date -RWed, 15 Sep 2021 21:42:05 +0800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world!</title>
    <link href="/2021/09/15/hello-world/"/>
    <url>/2021/09/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> hello world!</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
